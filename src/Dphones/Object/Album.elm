-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Dphones.Object.Album exposing (..)

import Dphones.Enum.Track_select_column
import Dphones.InputObject
import Dphones.Interface
import Dphones.Object
import Dphones.Scalar
import Dphones.ScalarCodecs
import Dphones.Union
import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode


date : SelectionSet Dphones.ScalarCodecs.Date Dphones.Object.Album
date =
    Object.selectionForField "ScalarCodecs.Date" "date" [] (Dphones.ScalarCodecs.codecs |> Dphones.Scalar.unwrapCodecs |> .codecDate |> .decoder)


type alias ListsOptionalArguments =
    { distinct_on : OptionalArgument (List Dphones.Enum.Track_select_column.Track_select_column)
    , limit : OptionalArgument Int
    , offset : OptionalArgument Int
    , order_by : OptionalArgument (List Dphones.InputObject.Track_order_by)
    , where_ : OptionalArgument Dphones.InputObject.Track_bool_exp
    }


{-| An array relationship

  - distinct\_on - distinct select on columns
  - limit - limit the number of rows returned
  - offset - skip the first n rows. Use only with order\_by
  - order\_by - sort the rows by one or more columns
  - where\_ - filter the rows returned

-}
lists :
    (ListsOptionalArguments -> ListsOptionalArguments)
    -> SelectionSet decodesTo Dphones.Object.Track
    -> SelectionSet (List decodesTo) Dphones.Object.Album
lists fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { distinct_on = Absent, limit = Absent, offset = Absent, order_by = Absent, where_ = Absent }

        optionalArgs____ =
            [ Argument.optional "distinct_on" filledInOptionals____.distinct_on (Encode.enum Dphones.Enum.Track_select_column.toString |> Encode.list), Argument.optional "limit" filledInOptionals____.limit Encode.int, Argument.optional "offset" filledInOptionals____.offset Encode.int, Argument.optional "order_by" filledInOptionals____.order_by (Dphones.InputObject.encodeTrack_order_by |> Encode.list), Argument.optional "where" filledInOptionals____.where_ Dphones.InputObject.encodeTrack_bool_exp ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "lists" optionalArgs____ object____ (Basics.identity >> Decode.list)


type alias ListsAggregateOptionalArguments =
    { distinct_on : OptionalArgument (List Dphones.Enum.Track_select_column.Track_select_column)
    , limit : OptionalArgument Int
    , offset : OptionalArgument Int
    , order_by : OptionalArgument (List Dphones.InputObject.Track_order_by)
    , where_ : OptionalArgument Dphones.InputObject.Track_bool_exp
    }


{-| An aggregate relationship

  - distinct\_on - distinct select on columns
  - limit - limit the number of rows returned
  - offset - skip the first n rows. Use only with order\_by
  - order\_by - sort the rows by one or more columns
  - where\_ - filter the rows returned

-}
lists_aggregate :
    (ListsAggregateOptionalArguments -> ListsAggregateOptionalArguments)
    -> SelectionSet decodesTo Dphones.Object.Track_aggregate
    -> SelectionSet decodesTo Dphones.Object.Album
lists_aggregate fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { distinct_on = Absent, limit = Absent, offset = Absent, order_by = Absent, where_ = Absent }

        optionalArgs____ =
            [ Argument.optional "distinct_on" filledInOptionals____.distinct_on (Encode.enum Dphones.Enum.Track_select_column.toString |> Encode.list), Argument.optional "limit" filledInOptionals____.limit Encode.int, Argument.optional "offset" filledInOptionals____.offset Encode.int, Argument.optional "order_by" filledInOptionals____.order_by (Dphones.InputObject.encodeTrack_order_by |> Encode.list), Argument.optional "where" filledInOptionals____.where_ Dphones.InputObject.encodeTrack_bool_exp ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "lists_aggregate" optionalArgs____ object____ Basics.identity


tag : SelectionSet String Dphones.Object.Album
tag =
    Object.selectionForField "String" "tag" [] Decode.string


title : SelectionSet String Dphones.Object.Album
title =
    Object.selectionForField "String" "title" [] Decode.string
